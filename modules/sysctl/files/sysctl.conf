# System default settings live in /usr/lib/sysctl.d/00-system.conf.
# To override those settings, enter new settings here, or in an /etc/sysctl.d/<name>.conf file
#
# For more information, see sysctl.conf(5) and sysctl.d(5).





##############ADD_Options后增加项

net.ipv4.ip_forward = 0
#是否启用ip转发功能做网关的机器需要设置为1，让其启用

net.ipv4.conf.default.rp_filter = 1
#开启反向路径过滤

net.ipv4.conf.default.accept_source_route = 0
#处理无源路由的包

kernel.sysrq = 0
#控制系统调试内核的功能要求

kernel.core_uses_pid = 1
#用于调试多线程应用程序

kernel.msgmnb = 65536
#所有在消息队列中的消息总和的最大值(msgmnb=64k)

kernel.msgmax = 65536
#指定内核中消息队列中消息的最大值(msgmax=64k) 

kernel.shmmax = 16657678335
#kernel.shmmax是核心参数中最重要的参数之一，用于定义单个共享内存段的最大值。设置应该足够大，
#       能在一个共享内存段下容纳下整个的SGA ,设置的过低可能会导致需要创建多个共享内存段，这样可能导致系统性能的下降。
#       至于导致系统下降的主要原因为在实例启动以及ServerProcess创建的时候，
#       多个小的共享内存段可能会导致当时轻微的系统性能的降低(在启动的时候需要去创建多个虚拟地址段，
#       在进程创建的时候要让进程对多个段进行“识别”，会有一些影响)，但是其他时候都不会有影响。
#
#官方建议值：
#
#32位linux系统：可取最大值为4GB（4294967296bytes）-1byte，即4294967295。
#       建议值为多于内存的一半，所以如果是32为系统，一般可取值为4294967295。
#       32位系统对SGA大小有限制，所以SGA肯定可以包含在单个共享内存段中。
#
#64位linux系统：可取的最大值为物理内存值-1byte，建议值为多于物理内存的一半，
#       一般取值大于SGA_MAX_SIZE即可，可以取物理内存-1byte。例如，如果为12GB物理内存，
#       可取12*1024*1024*1024-1=12884901887，SGA肯定会包含在单个共享内存段中


kernel.shmall = 4066816
#kernel.shmall：该参数控制可以使用的共享内存的总页数。Linux共享内存页大小为4KB,
#       共享内存段的大小都是共享内存页大小的整数倍。一个共享内存段的最大大小是16G，
#       那么需要共享内存页数是16GB/4KB=16777216KB /4KB=4194304（页），也就是64Bit系统下16GB物理内存，
#       设置kernel.shmall = 4194304才符合要求(几乎是原来设置2097152的两倍)。这时可以将shmmax参数调整到16G了，
#       同时可以修改SGA_MAX_SIZE和SGA_TARGET为12G（您想设置的SGA最大大小，当然也可以是2G~14G等，
#       还要协调PGA参数及OS等其他内存使用，不能设置太满，比如16G）

kernel.shmmni = 4066816
#kernel.shmmni：该参数是共享内存段的最大数量。shmmni缺省值4096，一般肯定是够用了。

net.ipv4.tcp_rmem = 8760  256960  4088000
#接收窗口的最大大小

net.ipv4.tcp_wmem = 8760  256960  4088000
#默认的接收窗口大小，默认值为4096(4K)

net.ipv4.tcp_sack = 1
#使 用 Selective ACK﹐它可以用来查找特定的遗失的数据报— 因此有助于快速恢复状态。该文件表示是否启用有选择的应答
#（Selective Acknowledgment），这可以通过有选择地应答乱序接收到的报文来提高性能（这样可以让发送者只发送丢失的报文段）。
#(对于广域网通信来说这个选项应该启用，但是这会增加对 CPU 的占用。)

net.ipv4.tcp_fack = 1
#打开FACK拥塞避免和快速重传功能。(注意，当tcp_sack设置为0的时候，这个值即使设置为1也无效)

net.ipv4.tcp_timestamps = 1
#时间戳,0关闭， 1开启，在(请参考RFC 1323)TCP的包头增加12个字节, 关于该配置对TIME_WAIT的影响及可能引起的问题:
#Timestamps 用在其它一些东西中﹐可以防范那些伪造的 sequence 号码。一条1G的
#宽带线路或许会重遇到带 out-of-line数值的旧sequence 号码(假如它是由于上次产生的)。Timestamp 会让它知道这是个 ‘旧封包’。
#(该文件表示是否启用以一种比超时重发更精确的方法（RFC 1323）来启用对 RTT 的计算；为了实现更好的性能应该启用这个选项。)
net.ipv4.tcp_window_scaling = 1
#支持更大的TCP窗口。 如果TCP窗口最大超过65535（64K）， 必须设置该数值为1

net.ipv4.tcp_retries2 = 5
#在丢弃激活(已建立通讯状况)的TCP连接之前﹐需要进行多少次重试。默认值为15，根据RTO的值来决定，相当于13-30分钟(RFC1122规定，
#必须大于100秒).(这个值根据目前的网络设置,可以适当地改小,我的网络内修改为了5)

net.ipv4.conf.lo.arp_ignore = 0  
net.ipv4.conf.lo.arp_announce = 0 
net.ipv4.conf.all.arp_ignore = 0  
net.ipv4.conf.all.arp_announce = 0
#arp_ignore:定义对目标地址为本地IP的ARP询问不同的应答模式0 
#0 - (默认值): 回应任何网络接口上对任何本地IP地址的arp查询请求 
#1 - 只回答目标IP地址是来访网络接口本地地址的ARP查询请求 
#2 -只回答目标IP地址是来访网络接口本地地址的ARP查询请求,且来访IP必须在该网络接口的子网段内 
#3 - 不回应该网络界面的arp请求，而只对设置的唯一和连接地址做出回应 
#4-7 - 保留未使用 
#8 -不回应所有（本地地址）的arp查询
#
#arp_announce:对网络接口上，本地IP地址的发出的，ARP回应，作出相应级别的限制: 确定不同程度的限制,宣布对来自本地源IP地址发出Arp请求的接口 
#0 - (默认) 在任意网络接口（eth0,eth1，lo）上的任何本地地址 
#1 -尽量避免不在该网络接口子网段的本地地址做出arp回应. 当发起ARP请求的源IP地址是被设置应该经由路由达到此网络接口的时候很有用.此时会检查来
#访IP是否为所有接口上的子网段内ip之一.如果改来访IP不属于各个网络接口上的子网段内,那么将采用级别2的方式来进行处理. 
#2 - 对查询目标使用最适当的本地地址.在此模式下将忽略这个IP数据包的源地址并尝试选择与能与该地址通信的本地地址.首要是选择所有的网络接口的子
#网中外出访问子网中包含该目标IP地址的本地地址. 如果没有合适的地址被发现,将选择当前的发送网络接口或其他的有可能接受到该ARP回应的网络接口来进行发送.
###########################################################
net.core.rmem_default = 262144
#接收套接字缓冲区大小的默认值(以字节为单位)。

net.core.rmem_max = 16777216
#接收套接字缓冲区大小的最大值(以字节为单位)。

net.core.wmem_default = 262144
#发送套接字缓冲区大小的默认值(以字节为单位)。

net.core.wmem_max = 16777216
#发送套接字缓冲区大小的最大值(以字节为单位)。

net.core.somaxconn = 65535
#用来限制监听(LISTEN)队列最大数据包的数量，超过这个数量就会导致链接超时或者触发重传机制。

net.core.netdev_max_backlog = 262144
#当网卡接收数据包的速度大于内核处理的速度时，会有一个队列保存这些数据包。这个参数表示该队列的最大值。

net.ipv4.tcp_max_orphans = 262144
#表示系统中最多有多少TCP套接字不被关联到任何一个用户文件句柄上。如果超过这里设置的数字，连接就会复位并输出警告信息。这个限制仅仅是为了防止简单的DoS攻击。此值不能太小。

net.ipv4.tcp_max_syn_backlog = 262144
#表示那些尚未收到客户端确认信息的连接（SYN消息）队列的长度，默认为1024，加大队列长度为262144，可以容纳更多等待连接的网络连接数。

net.ipv4.tcp_max_tw_buckets = 5000
#表示系统同时保持TIME_WAIT套接字的最大数量。如果超过此数，TIME_WAIT套接字会被立刻清除并且打印警告信息。之所以要设定这个限制，纯粹为了抵御那些简单的DoS攻击，不过，过多的TIME_WAIT套接字也会消耗服务器资源，甚至死机。

net.ipv4.ip_local_port_range = 5000 65500
#表示允许系统打开的端口范围。

net.ipv4.tcp_tw_recycle = 1
#表示开启TCP连接中TIME_WAIT套接字的快速回收，默认为0，表示关闭。

net.ipv4.tcp_tw_reuse = 1
#表示允许重用TIME_WAIT状态的套接字用于新的TCP连接,默认为0，表示关闭。

net.ipv4.tcp_syncookies = 1
#当出现SYN等待队列溢出时，启用cookies来处理，可防范少量SYN攻击，默认为0，表示关闭。

net.ipv4.tcp_synack_retries = 2
##表示系统允许SYN连接的重试次数。为了打开对端的连接，内核需要发送一个SYN并附带一个回应前面一个SYN的ACK包。也就是所谓三次握手中的第二次握手。这个设置决定了内核放弃连接之前发送SYN+ACK包的数量。

net.ipv4.tcp_syn_retries = 2
#表示在内核放弃建立连接之前发送SYN包的数量。

net.ipv4.tcp_fin_timeout = 30
#减少处于FIN-WAIT-2连接状态的时间，使系统可以处理更多的连接。

net.ipv4.tcp_keepalive_time = 300
#这个参数表示当keepalive启用时，TCP发送keepalive消息的频度。默认是2小时，若将其设置得小一些，可以更快地清理无效的连接。

net.ipv4.tcp_keepalive_intvl = 30
#探测消息未获得响应时，重发该消息的间隔时间（秒）。系统默认75秒。

net.ipv4.tcp_keepalive_probes = 3
#在认定连接失效之前，发送多少个TCP的keepalive探测包。系统默认值是9。这个值乘以tcp_keepalive_intvl之后决定了，一个连接发送了keepalive探测包之后可以有多少时间没有回应。

net.ipv4.tcp_mem = 786432 1048576 1572864
#确定TCP栈应该如何反映内存使用，每个值的单位都是内存页（通常是4KB）。
#第一个值是内存使用的下限；
#第二个值是内存压力模式开始对缓冲区使用应用压力的上限；
#第三个值是内存使用的上限。在这个层次上可以将报文丢弃，从而减少对内存的使用。
#示例中
#第一个值为786432*4/1024/1024=3G，
#第二个值为1048576*4/1024/1024=4G，
#第三个值为1572864*4/1024/1024=6G。

fs.aio-max-nr = 1048576
#fs.aio-max-nr：此参数限制并发未完成的请求，应该设置避免I/O子系统故障。
##推荐值是：1048576 其实它等于 1024*1024 也就是 1024K 个。

fs.file-max = 6815744
#该参数决定了系统中所允许的文件句柄最大数目，文件句柄设置代表linux系统中可以打开的文件的数量。

kernel.sem = 250 32000 100 128
#以kernel.sem = 250 32000 100 128为例：
#
#       250是参数semmsl的值，表示一个信号量集合中能够包含的信号量最大数目。
#
#       32000是参数semmns的值，表示系统内可允许的信号量最大数目。
#
#       100是参数semopm的值，表示单个semopm()调用在一个信号量集合上可以执行的操作数量。
#
#       128是参数semmni的值，表示系统信号量集合总数。

vm.swappiness = 0
#swappiness：可設定為 0 至 100 來控制系統做 swapping 的程度。較高的 value 會令系統盡量將不是 active 的 processes 進行 swapping，
##從而令系統有更多 free physical memory 來處理其他新增的 processes。較低的 value 會令系統盡量不要做 swapping，
##將所有曾經放在 memory 內的 processes 留在 memory，加快系統的反應。系統 default value 是 60。在這裏建議使用 0。
#表示尽量使用内存，减少使用磁盘swap交换分区，内存速度明显高于磁盘一个数量级。

vm.overcommit_memory = 1
#overcommit_memory文件指定了内核针对内存分配的策略，其值可以是0、1、2。
#0， 表示内核将检查是否有足够的可用内存供应用进程使用；如果有足够的可用内存，内存申请允许；否则，内存申请失败，并把错误返回给应用进程。
#1， 表示内核允许分配所有的物理内存，而不管当前的内存状态如何。
#2， 表示内核允许分配超过所有物理内存和交换空间总和的内存

net.ipv4.conf.default.send_redirects = 0 
net.ipv4.conf.all.send_redirects = 0 
#禁止发送重定向 

net.ipv4.conf.lo.accept_redirects = 0 
net.ipv4.conf.default.accept_redirects = 0 
net.ipv4.conf.all.accept_redirects = 0 
#不接受icmp重定向 

net.ipv4.icmp_echo_ignore_all = 1 
#忽略所有类型的icmp或ping 

net.ipv4.tcp_dsack = 0 
#tcp-sack和tcp-dsack优化 

#net.inet.ip.sourceroute=0
#net.inet.ip.accept_sourceroute=0
#通过源路由，攻击者可以尝试到达内部IP地址 –包括RFC1918中的地址，所以不接受源路由信息包可以防止你的内部网络被探测。

kernel.pid_max = 65536
#指定系统可创建的最大进程数

kernel.randomize_va_space = 1
#Linux Kernel引入了地址空间布局随机化的概念，该概念的提出是出于安全考虑。试想如果堆栈空间的地址都是确定的，那么恶意代码就很容易
#通过内存溢出的代码来访问堆栈空间的内容，地址空间布局随机化就是使得进程虚拟空间的布局（主要是各个部分的起始地址）位于随机的位置，
#以此来降低被攻击的可能性。
#在/proc/sys/kernel/randomize_va_space中的值如果为0则表示关闭所有的随机化，如果为1，表示打开mmap base、栈、VDSO页面随机化，如果
#为2则表示在1的基础上进一步打开堆地址随机化。在打开堆地址随机化之前，堆的起始位置是紧接着应用程序bss段之后的。       

net.ipv4.conf.all.rp_filter = 1
net.ipv4.conf.default.rp_filter = 1
#开启反向路径过滤，加强入站过滤（ingress filtering）和出站过滤（egress filtering），防止ip地址欺骗

net.ipv4.conf.all.accept_redirects = 0
#禁止接收路由重定向报文，防止路由表被恶意更改
net.ipv4.conf.default.accept_redirects = 0
net.ipv4.conf.all.secure_redirects = 0
#只接受来自网关的“重定向”icmp报文
net.ipv4.conf.default.secure_redirects = 0
#确保无人能够修改路由表

net.ipv4.conf.all.accept_source_route = 0
net.ipv4.conf.default.accept_source_route = 0
#禁用icmp源路由选项

net.ipv4.icmp_echo_ignore_broadcasts = 1
# 忽略icmp ping广播包，禁止ICMP重定向
 
net.ipv4.icmp_ignore_bogus_error_responses = 1
#打开ICMP错误消息保护，忽略无效的消息
 
net.ipv4.conf.all.log_martians = 1
net.ipv4.conf.default.log_martians = 1
#将进行ip假冒的ip包记录到/var/log/messages

net.nf_conntrack_max = 6553600
net.netfilter.nf_conntrack_max = 6553600
net.netfilter.nf_conntrack_tcp_timeout_established = 180
net.netfilter.nf_conntrack_tcp_timeout_time_wait = 120
net.netfilter.nf_conntrack_tcp_timeout_close_wait = 60
net.netfilter.nf_conntrack_tcp_timeout_fin_wait = 120


